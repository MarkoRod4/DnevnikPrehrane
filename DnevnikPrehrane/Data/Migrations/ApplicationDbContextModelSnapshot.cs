// <auto-generated />
using System;
using DnevnikPrehrane.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DnevnikPrehrane.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DnevnikPrehrane.Models.Biljeska", b =>
                {
                    b.Property<int>("BiljeskaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BiljeskaId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BiljeskaId");

                    b.HasIndex("UserId");

                    b.ToTable("Biljeske");
                });

            modelBuilder.Entity("DnevnikPrehrane.Models.Kategorija", b =>
                {
                    b.Property<int>("KategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategorijaId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("KategorijaId");

                    b.HasIndex("UserId");

                    b.ToTable("Kategorije");

                    b.HasData(
                        new
                        {
                            KategorijaId = 1,
                            Name = "Voće"
                        },
                        new
                        {
                            KategorijaId = 2,
                            Name = "Povrće"
                        },
                        new
                        {
                            KategorijaId = 3,
                            Name = "Meso"
                        },
                        new
                        {
                            KategorijaId = 4,
                            Name = "Riba"
                        },
                        new
                        {
                            KategorijaId = 5,
                            Name = "Žitarice"
                        },
                        new
                        {
                            KategorijaId = 6,
                            Name = "Mliječni proizvodi"
                        },
                        new
                        {
                            KategorijaId = 7,
                            Name = "Ostalo"
                        });
                });

            modelBuilder.Entity("DnevnikPrehrane.Models.Namirnica", b =>
                {
                    b.Property<int>("NamirnicaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NamirnicaId"));

                    b.Property<double>("Kalorije")
                        .HasColumnType("float");

                    b.Property<int>("KategorijaId")
                        .HasColumnType("int");

                    b.Property<double>("Masti")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.Property<double>("Ugljikohidrati")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NamirnicaId");

                    b.HasIndex("KategorijaId");

                    b.HasIndex("UserId");

                    b.ToTable("Namirnice");

                    b.HasData(
                        new
                        {
                            NamirnicaId = 1,
                            Kalorije = 52.0,
                            KategorijaId = 1,
                            Masti = 0.20000000000000001,
                            Name = "Jabuka",
                            Protein = 0.29999999999999999,
                            Ugljikohidrati = 14.0
                        },
                        new
                        {
                            NamirnicaId = 2,
                            Kalorije = 89.0,
                            KategorijaId = 1,
                            Masti = 0.29999999999999999,
                            Name = "Banana",
                            Protein = 1.1000000000000001,
                            Ugljikohidrati = 23.0
                        },
                        new
                        {
                            NamirnicaId = 3,
                            Kalorije = 47.0,
                            KategorijaId = 1,
                            Masti = 0.10000000000000001,
                            Name = "Naranča",
                            Protein = 0.90000000000000002,
                            Ugljikohidrati = 12.0
                        },
                        new
                        {
                            NamirnicaId = 4,
                            Kalorije = 41.0,
                            KategorijaId = 2,
                            Masti = 0.20000000000000001,
                            Name = "Mrkva",
                            Protein = 0.90000000000000002,
                            Ugljikohidrati = 10.0
                        },
                        new
                        {
                            NamirnicaId = 5,
                            Kalorije = 34.0,
                            KategorijaId = 2,
                            Masti = 0.40000000000000002,
                            Name = "Brokula",
                            Protein = 2.7999999999999998,
                            Ugljikohidrati = 7.0
                        },
                        new
                        {
                            NamirnicaId = 6,
                            Kalorije = 18.0,
                            KategorijaId = 2,
                            Masti = 0.20000000000000001,
                            Name = "Rajčica",
                            Protein = 0.90000000000000002,
                            Ugljikohidrati = 3.8999999999999999
                        },
                        new
                        {
                            NamirnicaId = 7,
                            Kalorije = 165.0,
                            KategorijaId = 3,
                            Masti = 3.6000000000000001,
                            Name = "Pileća prsa",
                            Protein = 31.0,
                            Ugljikohidrati = 0.0
                        },
                        new
                        {
                            NamirnicaId = 8,
                            Kalorije = 250.0,
                            KategorijaId = 3,
                            Masti = 17.0,
                            Name = "Govedina",
                            Protein = 26.0,
                            Ugljikohidrati = 0.0
                        },
                        new
                        {
                            NamirnicaId = 9,
                            Kalorije = 132.0,
                            KategorijaId = 4,
                            Masti = 1.3,
                            Name = "Tuna",
                            Protein = 28.0,
                            Ugljikohidrati = 0.0
                        },
                        new
                        {
                            NamirnicaId = 10,
                            Kalorije = 208.0,
                            KategorijaId = 4,
                            Masti = 13.0,
                            Name = "Losos",
                            Protein = 20.0,
                            Ugljikohidrati = 0.0
                        },
                        new
                        {
                            NamirnicaId = 11,
                            Kalorije = 265.0,
                            KategorijaId = 5,
                            Masti = 3.2000000000000002,
                            Name = "Kruh",
                            Protein = 9.0,
                            Ugljikohidrati = 49.0
                        },
                        new
                        {
                            NamirnicaId = 12,
                            Kalorije = 131.0,
                            KategorijaId = 5,
                            Masti = 1.1000000000000001,
                            Name = "Tjestenina",
                            Protein = 5.0,
                            Ugljikohidrati = 25.0
                        },
                        new
                        {
                            NamirnicaId = 13,
                            Kalorije = 42.0,
                            KategorijaId = 6,
                            Masti = 1.0,
                            Name = "Mlijeko",
                            Protein = 3.3999999999999999,
                            Ugljikohidrati = 5.0
                        },
                        new
                        {
                            NamirnicaId = 14,
                            Kalorije = 402.0,
                            KategorijaId = 6,
                            Masti = 33.0,
                            Name = "Sir",
                            Protein = 25.0,
                            Ugljikohidrati = 1.3
                        },
                        new
                        {
                            NamirnicaId = 15,
                            Kalorije = 59.0,
                            KategorijaId = 6,
                            Masti = 0.40000000000000002,
                            Name = "Jogurt",
                            Protein = 10.0,
                            Ugljikohidrati = 3.6000000000000001
                        },
                        new
                        {
                            NamirnicaId = 16,
                            Kalorije = 155.0,
                            KategorijaId = 7,
                            Masti = 11.0,
                            Name = "Jaje",
                            Protein = 13.0,
                            Ugljikohidrati = 1.1000000000000001
                        },
                        new
                        {
                            NamirnicaId = 17,
                            Kalorije = 884.0,
                            KategorijaId = 7,
                            Masti = 100.0,
                            Name = "Maslinovo ulje",
                            Protein = 0.0,
                            Ugljikohidrati = 0.0
                        },
                        new
                        {
                            NamirnicaId = 18,
                            Kalorije = 387.0,
                            KategorijaId = 7,
                            Masti = 0.0,
                            Name = "Šećer",
                            Protein = 0.0,
                            Ugljikohidrati = 100.0
                        });
                });

            modelBuilder.Entity("DnevnikPrehrane.Models.Obrok", b =>
                {
                    b.Property<int>("ObrokId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObrokId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImeNamirnice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Kalorije")
                        .HasColumnType("float");

                    b.Property<double>("Količina")
                        .HasColumnType("float");

                    b.Property<double>("Masti")
                        .HasColumnType("float");

                    b.Property<double>("Protein")
                        .HasColumnType("float");

                    b.Property<double>("Ugljikohidrati")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ObrokId");

                    b.HasIndex("UserId");

                    b.ToTable("Obroci");
                });

            modelBuilder.Entity("DnevnikPrehrane.Models.ZapisMase", b =>
                {
                    b.Property<int>("ZapisMaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZapisMaseId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("Masa")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ZapisMaseId");

                    b.HasIndex("UserId");

                    b.ToTable("ZapisiMase");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DnevnikPrehrane.Models.Biljeska", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnevnikPrehrane.Models.Kategorija", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnevnikPrehrane.Models.Namirnica", b =>
                {
                    b.HasOne("DnevnikPrehrane.Models.Kategorija", "Kategorija")
                        .WithMany("Namirnice")
                        .HasForeignKey("KategorijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Kategorija");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnevnikPrehrane.Models.Obrok", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnevnikPrehrane.Models.ZapisMase", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnevnikPrehrane.Models.Kategorija", b =>
                {
                    b.Navigation("Namirnice");
                });
#pragma warning restore 612, 618
        }
    }
}
